<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2000/01/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>函数和代码复用</title>
    <url>/2019/02/07/%E5%87%BD%E6%95%B0%E5%92%8C%E4%BB%A3%E7%A0%81%E5%A4%8D%E7%94%A8/</url>
    <content><![CDATA[<h1 id="函数的定义与使用"><a href="#函数的定义与使用" class="headerlink" title="函数的定义与使用"></a>函数的定义与使用</h1><blockquote>
<ul>
<li>函数的理解与定义</li>
<li>函数的使用及调用过程</li>
<li>函数的参数传递</li>
<li>函数的返回值</li>
<li>局部变量和全局变量</li>
<li><code>lambda</code>函数</li>
</ul>
</blockquote>
<a id="more"></a>
<h3 id="函数的理解和定义"><a href="#函数的理解和定义" class="headerlink" title="- 函数的理解和定义"></a>- 函数的理解和定义</h3><blockquote>
<p>函数是一段代码的表示   </p>
</blockquote>
<pre><code>def &lt;函数名&gt;(&lt;参数(0个或多个)&gt;):
    &lt;函数体&gt;
    return &lt;返回值&gt;</code></pre><ul>
<li>函数可以没有参数，但必须保留括号。<code>def &lt;函数名&gt;()</code>是可行的</li>
<li>函数是一段具有特定功能的、可重用的语句组</li>
<li>函数是一种功能的抽象，一般函数表达特定的功能</li>
<li>两个作用：<strong>降低编程难度</strong>和<strong>代码复用</strong></li>
</ul>
<p><strong>案例：计算 n!：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span> </span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i</span><br><span class="line">	<span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>

<ul>
<li>函数定义时，所指定的参数是一种<strong>占位符</strong></li>
<li>函数定义后，如果不经过<strong>调用</strong>，不会被执行</li>
<li>函数定义时，参数是输入、函数体是处理、结果是输出(IPO)</li>
</ul>
<h3 id="函数的使用及调用过程"><a href="#函数的使用及调用过程" class="headerlink" title="- 函数的使用及调用过程"></a>- 函数的使用及调用过程</h3><blockquote>
<p>调用是运行函数代码的方式  </p>
</blockquote>
<p><strong>函数的调用：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span> </span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i</span><br><span class="line">	<span class="keyword">return</span> s   <span class="comment"># 返回值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>)   <span class="comment"># 函数的调用</span></span><br><span class="line"><span class="number">3628800</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数调用是要给出实际参数</li>
<li>实际参数替换定义中的参数</li>
<li>函数调用后得到返回值</li>
</ul>
<h3 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="- 函数的参数传递"></a>- 函数的参数传递</h3><h4 id="参数传递："><a href="#参数传递：" class="headerlink" title="- 参数传递："></a>- 参数传递：</h4><p><img src="https://ws2.sinaimg.cn/large/d20fc924ly1fzjsv29bgjj212b0dltdy.jpg" alt="image"></p>
<ul>
<li>函数可以没有参数，但必须保留括号</li>
<li>函数定义时可以为某些参数指定默认值，构成可选参数</li>
</ul>
<h4 id="可选参数传递："><a href="#可选参数传递：" class="headerlink" title="- 可选参数传递："></a>- 可选参数传递：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">(&lt;必选参数&gt;, &lt;可选参数&gt;)</span>:</span></span><br><span class="line">	&lt;函数体&gt;</span><br><span class="line">	<span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure>

<p><strong>计算 n!//m：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n, m=<span class="number">1</span>)</span>:</span></span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i</span><br><span class="line">	<span class="keyword">return</span> s//m</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>)</span><br><span class="line"><span class="number">3628800</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">725760</span></span><br></pre></td></tr></table></figure>

<h5 id="可变参数传递"><a href="#可变参数传递" class="headerlink" title="- 可变参数传递"></a>- 可变参数传递</h5><blockquote>
<p>函数定义时可以设计可变数量参数，即不确定参数总数量  </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;函数名&gt;<span class="params">(&lt;参数&gt;, *b)</span>:</span>   <span class="comment"># b为可变参数</span></span><br><span class="line">	&lt;函数体&gt;</span><br><span class="line">	<span class="keyword">return</span> &lt;返回值&gt;</span><br></pre></td></tr></table></figure>

<p><strong>计算 n!乘数：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n, *b)</span>:</span></span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= <span class="number">1</span> </span><br><span class="line">	<span class="keyword">for</span> item <span class="keyword">in</span> b:</span><br><span class="line">		s *= item</span><br><span class="line">	<span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>, <span class="number">3</span>)   <span class="comment"># 计算 10!*3</span></span><br><span class="line"><span class="number">10886400</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>)   <span class="comment"># 计算 10!*3*5*8</span></span><br><span class="line"><span class="number">435456000</span></span><br></pre></td></tr></table></figure>

<h4 id="参数传递的两种方式"><a href="#参数传递的两种方式" class="headerlink" title="- 参数传递的两种方式"></a>- 参数传递的两种方式</h4><blockquote>
<p>函数调用时，参数可以按照位置或名称方式传递</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n, m=<span class="number">1</span>)</span>:</span></span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i</span><br><span class="line">	<span class="keyword">return</span> s//m</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="number">725760</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(m=<span class="number">5</span>, n=<span class="number">10</span>)</span><br><span class="line"><span class="number">725760</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="- 函数的返回值"></a>- 函数的返回值</h3><blockquote>
<p>函数可以返回0个或多个结果</p>
</blockquote>
<ul>
<li><code>return</code>保留字用来传递返回值</li>
<li>函数可以有返回值，也可以没有，可以使用<code>return</code>，也可以不使用</li>
<li><code>return</code>可以传递0个返回值，也可以传递多个返回值  </li>
</ul>
<p><strong>计算 n!//m、n、m：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n, m=<span class="number">1</span>)</span>:</span></span><br><span class="line">	s = <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i</span><br><span class="line">	<span class="keyword">return</span> s//m, n, m    <span class="comment"># 返回3个值 </span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line">(<span class="number">725760</span>, <span class="number">10</span>, <span class="number">5</span>)    <span class="comment"># 元组类型</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = fact(<span class="number">10</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a, b, c)</span><br><span class="line"><span class="number">725760</span>, <span class="number">10</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure>


<h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="- 局部变量和全局变量"></a>- 局部变量和全局变量</h3><blockquote>
<p>局部变量是函数内部使用的变量，全局变量是整个程序使用的变量</p>
</blockquote>
<p><img src="https://wx1.sinaimg.cn/large/d20fc924ly1fzju86w9hyj20px0dhwio.jpg" alt="image"></p>
<h4 id="1-基本数据类型，无论是否重名，局部变量和全局变量是不同变量"><a href="#1-基本数据类型，无论是否重名，局部变量和全局变量是不同变量" class="headerlink" title="1. 基本数据类型，无论是否重名，局部变量和全局变量是不同变量"></a>1. 基本数据类型，无论是否重名，局部变量和全局变量是不同变量</h4><ul>
<li>局部变量是函数内部占位符，与全局变量可能重名但不相同</li>
<li>函数运算结束后，局部变量被释放(不在存在)</li>
<li>可以使用<code>global</code>保留字在函数内部使用全局变量</li>
</ul>
<p><strong>案例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, s = <span class="number">10</span>, <span class="number">100</span>     <span class="comment"># 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">	s = <span class="number">1</span>          <span class="comment"># 局部变量</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i     <span class="comment"># 局部变量</span></span><br><span class="line">	<span class="keyword">return</span> s       <span class="comment"># 局部变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fact(n), s)   <span class="comment"># 此处s是全局变量</span></span><br><span class="line"><span class="number">3628800</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h4 id="2-使用global在函数内部使用全局变量"><a href="#2-使用global在函数内部使用全局变量" class="headerlink" title="2.使用global在函数内部使用全局变量"></a>2.使用<code>global</code>在函数内部使用全局变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, s = <span class="number">10</span>, <span class="number">100</span>    <span class="comment"># 全局变量</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> s      <span class="comment"># 此处声明s为全局变量</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">		s *= i    </span><br><span class="line">	<span class="keyword">return</span> s      <span class="comment"># 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(fact(n), s)   <span class="comment"># s已被函数所修改</span></span><br><span class="line"><span class="number">362880000</span> <span class="number">362880000</span></span><br></pre></td></tr></table></figure>

<h4 id="3-组合数据类型，如果局部变量未被真实创建，等同于全局变量"><a href="#3-组合数据类型，如果局部变量未被真实创建，等同于全局变量" class="headerlink" title="3. 组合数据类型，如果局部变量未被真实创建，等同于全局变量"></a>3. 组合数据类型，如果局部变量未被真实创建，等同于全局变量</h4><p><strong>案例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">"F"</span>, <span class="string">"f"</span>]     <span class="comment"># 通过使用[]真实创建一个全局列表ls</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">	ls.append(a)	<span class="comment"># 添加一个元素 </span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">"C"</span>)       <span class="comment"># 全局变量ls被修改</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ls)</span><br><span class="line">[<span class="string">'F'</span>, <span class="string">'f'</span>, <span class="string">'C'</span>]</span><br></pre></td></tr></table></figure>

<p><strong>组合类型被真实创建：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ls = [<span class="string">"F"</span>, <span class="string">"f"</span>]     <span class="comment"># 通过使用[]真实创建一个全局列表ls</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">	ls = []         <span class="comment"># 真实创建列表ls</span></span><br><span class="line">	ls.append(a)	<span class="comment"># 添加一个元素 </span></span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="string">"C"</span>)       </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(ls)</span><br><span class="line">[<span class="string">'F'</span>, <span class="string">'f'</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(func(<span class="string">"C"</span>))</span><br><span class="line">[<span class="string">"C"</span>]</span><br></pre></td></tr></table></figure>


<h3 id="lambda函数"><a href="#lambda函数" class="headerlink" title="- lambda函数"></a>- <code>lambda</code>函数</h3><blockquote>
<ul>
<li><code>lambda</code>函数返回函数名作为结果</li>
<li><code>lambda</code>函数是一种匿名函数，即没有名字的函数</li>
<li>使用<code>lambda</code>保留字定义，函数名是返回结果</li>
<li><code>lambda</code>函数用于定义简单的、能够在一行内表示的函数</li>
</ul>
</blockquote>
<p><strong>定义方法：</strong></p>
<pre><code>&lt;函数名&gt; = lambda &lt;参数&gt;:&lt;表达式&gt;</code></pre><p><strong>等价于：</strong></p>
<pre><code>def &lt;函数名&gt;(&lt;参数&gt;):
    &lt;函数体&gt;
    return &lt;函数名&gt;</code></pre><p><strong>案例：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> x, y : x + y    <span class="comment"># 定义函数 f</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="keyword">lambda</span> : <span class="string">"lambda函数"</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f()</span><br><span class="line"><span class="string">'lambda函数'</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>谨慎使用lambda函数</p>
</blockquote>
<ul>
<li><code>lambda</code>函数主要用作一些特定的函数或方法的参数</li>
<li><code>lambda</code>函数有一些固定使用方式</li>
<li>一般情况，使用<code>def</code>定义普通函数</li>
</ul>
<hr>
<h1 id="代码复用与函数递归"><a href="#代码复用与函数递归" class="headerlink" title="代码复用与函数递归"></a>代码复用与函数递归</h1><blockquote>
<ul>
<li>代码复用与模块化设计</li>
<li>函数递归的理解</li>
<li>函数递归的调用过程</li>
<li>函数递归实例解析</li>
</ul>
</blockquote>
<h3 id="代码复用与模块化设计"><a href="#代码复用与模块化设计" class="headerlink" title="-  代码复用与模块化设计"></a>-  代码复用与模块化设计</h3><blockquote>
<p>把代码当成资源进行抽象</p>
</blockquote>
<p>代码资源化：程序代码是一种用来表达计算的“资源”<br>代码抽象化：使用函数等方法对代码赋予更高级别的定义 </p>
<ul>
<li><p><strong>代码复用：</strong>同一份代码在需要时可以被重复使用</p>
<ul>
<li><strong>函数</strong>和<strong>对象</strong>是代码复用的两种主要形式</li>
<li>函数：将代码命名  – 在代码层面建立了初步抽象 </li>
<li>对象：属性和方法  – 在<strong>函数之上</strong>再次组织进行抽象</li>
</ul>
</li>
<li><p><strong>模块化设计：</strong>  </p>
<ul>
<li>通过函数或对象封装将程序划分为模块及模块间的表达</li>
<li>具体包括：主程序、子程序和子程序之间的关系</li>
<li>分而治之：一种分而治之、分层抽象、体系化的设计思想</li>
</ul>
</li>
<li><p><strong>紧耦合与松耦合：</strong></p>
<ul>
<li>紧耦合：两个部分交流很多，无法独立存在</li>
<li>松耦合：两个部分交流较少，可以独立存在 </li>
<li>模块内部紧耦合、模块之间松耦合</li>
</ul>
</li>
</ul>
<h3 id="函数递归的理解"><a href="#函数递归的理解" class="headerlink" title="- 函数递归的理解"></a>- 函数递归的理解</h3><blockquote>
<p>函数定义中调用函数自身的方式</p>
</blockquote>
<ul>
<li><strong>两个关键特征：</strong><ul>
<li><strong>链条</strong>：计算过程存在的递归链条</li>
<li><strong>基例</strong>：存在一个或多个不需要再次递归的基例<br><br><br></li>
</ul>
</li>
<li><strong>递归的实现：函数 + 分支语句</strong><ul>
<li>递归本身是一个函数，需要函数定义方式去描述</li>
<li>函数内部，采用分支语句对输入参数进行判断</li>
<li>基例和链条，分别编写对应代码</li>
</ul>
</li>
</ul>
<p><strong>案例：</strong><br><img src="https://ws1.sinaimg.cn/large/d20fc924ly1fzm36fbys1j20fs03tjrq.jpg" alt="image"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fact</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> n*fact(n<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fact(<span class="number">5</span>)</span><br><span class="line"><span class="number">120</span></span><br></pre></td></tr></table></figure>

<h3 id="函数递归的调用过程"><a href="#函数递归的调用过程" class="headerlink" title="- 函数递归的调用过程"></a>- 函数递归的调用过程</h3><p><img src="https://ws3.sinaimg.cn/large/d20fc924ly1fzm3l2oj8kj21di0is7gt.jpg" alt="image"></p>
<h3 id="函数递归实例解析"><a href="#函数递归实例解析" class="headerlink" title="- 函数递归实例解析"></a>- 函数递归实例解析</h3><ol>
<li><strong>字符串反转：</strong>  </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rvs</span><span class="params">(s)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> s == <span class="string">""</span>:</span><br><span class="line">    	<span class="keyword">return</span> s</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">    	<span class="keyword">return</span> s[<span class="number">-1</span>] + rvs(s[:<span class="number">-1</span>])</span><br><span class="line">	   <span class="comment"># or return rvs(s[1:]) + s[0]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rvs(<span class="string">"abcdefg"</span>)</span><br><span class="line">gfedcba</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>斐波那契数列：</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span> <span class="keyword">or</span> n == <span class="number">2</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>fib(<span class="number">10</span>)</span><br><span class="line"><span class="number">55</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>汉诺塔：</strong></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanoi</span><span class="params">(n, src, dst, mid)</span>:</span></span><br><span class="line">	<span class="keyword">global</span> count</span><br><span class="line">	<span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">		print(<span class="string">"&#123;&#125;号: &#123;&#125; -&gt; &#123;&#125;"</span> .format(<span class="number">1</span>, src, dst))</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		hanoi(n<span class="number">-1</span>, src, mid, dst)</span><br><span class="line">		print(<span class="string">"&#123;&#125;号: &#123;&#125; -&gt; &#123;&#125;"</span> .format(n, src, dst))</span><br><span class="line">		count += <span class="number">1</span></span><br><span class="line">		hanoi(n<span class="number">-1</span>, mid, dst, src)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hanoi(<span class="number">3</span>, <span class="string">"A"</span>, <span class="string">"C"</span>, <span class="string">"B"</span>)</span><br><span class="line">1号: A -&gt; C</span><br><span class="line">2号: A -&gt; B</span><br><span class="line">1号: C -&gt; B</span><br><span class="line">3号: A -&gt; C</span><br><span class="line">1号: B -&gt; A</span><br><span class="line">2号: B -&gt; C</span><br><span class="line">1号: A -&gt; C</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(count)</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础数据类型</title>
    <url>/2019/01/19/python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Python基础数据类型"><a href="#Python基础数据类型" class="headerlink" title="Python基础数据类型"></a>Python基础数据类型</h1><blockquote>
<ol>
<li>数字类型</li>
<li>字符串类型</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><blockquote>
<p>数字类型(Number)包含<strong>整数(int)</strong>，<strong>浮点数(float)</strong>，<strong>复数(complex)</strong>以及<strong>布尔值(bool)</strong></p>
</blockquote>
<h3 id="数值运算操作符"><a href="#数值运算操作符" class="headerlink" title="- 数值运算操作符"></a>- 数值运算操作符</h3><table>
<thead>
<tr>
<th align="center">基本操作符</th>
<th>二元操作符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x + y</td>
<td>x += y</td>
</tr>
<tr>
<td align="center">x - y</td>
<td>x -= y</td>
</tr>
<tr>
<td align="center"><!--more--> x * y</td>
<td>x *= y</td>
</tr>
<tr>
<td align="center">x / y</td>
<td>x /= y</td>
</tr>
<tr>
<td align="center">x // y</td>
<td>x //= y</td>
</tr>
<tr>
<td align="center">x % y</td>
<td>x %= y</td>
</tr>
<tr>
<td align="center">x ** y</td>
<td>x **= y</td>
</tr>
<tr>
<td align="center">+ x</td>
<td></td>
</tr>
<tr>
<td align="center">- x</td>
<td></td>
</tr>
</tbody></table>
<h3 id="一些以函数形式提供的运算功能"><a href="#一些以函数形式提供的运算功能" class="headerlink" title="- 一些以函数形式提供的运算功能"></a>- 一些以函数形式提供的运算功能</h3><table>
<thead>
<tr>
<th align="center">函数及使用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pow(x, y)</td>
<td><code>x</code>的<code>y</code>次方</td>
</tr>
<tr>
<td align="center">abs(x)</td>
<td><code>x</code>的绝对值</td>
</tr>
<tr>
<td align="center">divmod(x, y)</td>
<td>商余,<code>(x//y, x%y)</code>同时输出商和余数</td>
</tr>
<tr>
<td align="center">pow(x, y [, z])</td>
<td>幂余,<code>(x**y)%z</code>,<code>[..]</code>表示参数<code>z</code>可省略</td>
</tr>
<tr>
<td align="center">round(x [, d])</td>
<td>四舍五入,<code>d</code>是保留小数位数，默认为<code>0</code></td>
</tr>
<tr>
<td align="center">max(x1, x2, …, xn)</td>
<td>返回最大值</td>
</tr>
<tr>
<td align="center">min(x1, x2, …, xn)</td>
<td>返回最小值</td>
</tr>
<tr>
<td align="center">int(x)</td>
<td>将<code>x</code>转换为整数，舍弃小数部分</td>
</tr>
<tr>
<td align="center">float(x)</td>
<td>将<code>x</code>转换为浮点数，增加小数部分</td>
</tr>
<tr>
<td align="center">complex(x)</td>
<td>将<code>x</code>转换为复数，增加虚数部分</td>
</tr>
<tr>
<td align="center">&lt;a&gt; e &lt;b&gt;</td>
<td>科学计数法，表示<code>a*10</code>的b次方</td>
</tr>
<tr>
<td align="center">x.real</td>
<td>返回复数的实部</td>
</tr>
<tr>
<td align="center">x.imag</td>
<td>返回复数的虚部</td>
</tr>
</tbody></table>
<h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><blockquote>
<p>字符串(String)是指由0个或多个字符组成的有序字符序列</p>
</blockquote>
<h3 id="字符串的-2类共4种-表示方法"><a href="#字符串的-2类共4种-表示方法" class="headerlink" title="- 字符串的 2类共4种 表示方法"></a>- 字符串的 2类共4种 表示方法</h3><ul>
<li>由一对单引号或双引号表示，仅表示单行字符串<br>如： <code>&quot;C&quot;或者&#39;C&#39;</code></li>
<li>由一对三单引号或三双引号表示，可表示多行字符串<br>如：<code>&#39;&#39;&#39;Hello</code><br>　　　　　　　<code>World&#39;&#39;&#39;</code> (这种方式也可以当做注释来使用)</li>
</ul>
<h3 id="字符串的序号"><a href="#字符串的序号" class="headerlink" title="- 字符串的序号"></a>- 字符串的序号</h3><p><img src="https://wx1.sinaimg.cn/large/d20fc924ly1fzboh9b70uj210z0cq46f.jpg" alt="字符串的序号">  </p>
<ul>
<li>索引：返回字符串中单个字符　　<strong>&lt;字符串&gt;[序号]</strong><br>如：<code>TempStr[-1]</code>  </li>
<li>切片：返回字符串中一段字符子串　　<strong>&lt;字符串&gt;[开头: 结尾]</strong><br>如：<code>TempStr[0:-1]</code></li>
</ul>
<h3 id="切片的高级用法"><a href="#切片的高级用法" class="headerlink" title="- 切片的高级用法"></a>- 切片的高级用法</h3><ul>
<li>使用<strong>[开头: 结尾: 步长]</strong>对字符串切片<ul>
<li><strong>&lt;字符串&gt;[M: N]</strong> ，<strong>M</strong> 缺失表示<strong>至开头</strong>，<strong>N</strong> 缺失表示<strong>至结尾</strong></li>
<li><strong>&lt;字符串&gt;[M: N: K]</strong>, 根据步长 <strong>K</strong> 对字符串切片</li>
</ul>
</li>
</ul>
<h3 id="字符串的特殊字符"><a href="#字符串的特殊字符" class="headerlink" title="- 字符串的特殊字符"></a>- 字符串的特殊字符</h3><ul>
<li>转义符“ <strong><code>\</code></strong> ”<ul>
<li>转义符表达特定字符本意</li>
<li>转义符形成一些组合，表达一些不可打印的含义<br>如：<code>&quot;\b&quot;</code>回退 <code>&quot;\n&quot;</code>换行(光标移动到下行首) <code>&quot;\r&quot;</code>回车(光标移动到本行首)  </li>
</ul>
</li>
</ul>
<h3 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="- 字符串操作符"></a>- 字符串操作符</h3><table>
<thead>
<tr>
<th align="center">操作符及使用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">x + y</td>
<td>连接两个字符串<code>x</code>和<code>y</code></td>
</tr>
<tr>
<td align="center">n * x <em>或</em> x * n</td>
<td>复制<code>n</code>次字符串<code>x</code></td>
</tr>
<tr>
<td align="center">x in s</td>
<td><code>r</code>如果<code>x</code>是<code>s</code>的子串，返回<code>True</code>，否则返回<code>False</code></td>
</tr>
</tbody></table>
<h3 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="- 字符串处理函数"></a>- 字符串处理函数</h3><table>
<thead>
<tr>
<th align="center">函数及使用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">len(x)</td>
<td>长度，返回字符串<code>x</code>的长度</td>
</tr>
<tr>
<td align="center">str(x)</td>
<td>任意类型<code>x</code>转换为字符串类型</td>
</tr>
<tr>
<td align="center">eval(x)</td>
<td>把字符串类型转化为其他类型(去掉引号)</td>
</tr>
<tr>
<td align="center">hex(x) <em>或</em> oct(x)</td>
<td>整数<code>x</code>的十六进制或八进制小写形式字符串</td>
</tr>
<tr>
<td align="center">chr(u)</td>
<td>将Unicode转换为字符</td>
</tr>
<tr>
<td align="center">ord(x)</td>
<td>将字符转换为Unicode编码</td>
</tr>
</tbody></table>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="- 实例 1"></a>- 实例 1</h3><ul>
<li>获取星期字符串  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">weekStr = <span class="string">"一二三四五六日"</span></span><br><span class="line">weekID = eval(input(<span class="string">"请输入1-7："</span>))  </span><br><span class="line">print(<span class="string">"星期%s"</span> % (weekStr[weekID - <span class="number">1</span>]))</span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="- 字符串处理方法"></a>- 字符串处理方法</h3><ul>
<li>“方法”特指 <code>&lt;a&gt;.&lt;b&gt;()</code> 风格中的函数 <code>&lt;b&gt;()</code>  </li>
<li>方法本身也是函数，但与 <code>&lt;a&gt;</code> 有关，<code>&lt;a&gt;.&lt;b&gt;()</code> 风格使用</li>
<li>字符串及变量也是 <code>&lt;a&gt;</code>，存在一些方法</li>
</ul>
<table>
<thead>
<tr>
<th align="center">方法及使用</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">str.lower() <em>或</em> str.upper()</td>
<td>返回字符串的副本，全部字符小写或大写<br><code>&quot;AbCdEfGh&quot;.lower()</code>结果为<code>&quot;abcdefgh&quot;</code></td>
</tr>
<tr>
<td align="center">str.split(sep=None)</td>
<td>返回一个列表，由<code>str</code>根据<code>sep</code>被分隔的部分组成<br><code>&quot;A,B,C&quot;.split(&quot;,&quot;)</code>结果为<code>[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;]</code></td>
</tr>
<tr>
<td align="center">str.count(sub)</td>
<td>返回子串<code>sub</code>在<code>str</code>中出现的次数<br><code>&quot;a apple a day&quot;.count(&quot;a&quot;)</code>结果为<code>4</code></td>
</tr>
<tr>
<td align="center">str.replace(old,new)</td>
<td>返回字符串<code>str</code>副本，所有<code>old</code>子串被替换为<code>new</code><br><code>&quot;python&quot;.replace(&quot;n&quot;,&quot;n123.io&quot;)</code>结果为  <code>&quot;python123.io&quot;</code></td>
</tr>
<tr>
<td align="center">str.center(width[,fillchar])</td>
<td>字符串<code>str</code>根据宽度<code>width</code>居中，<code>fillchar</code>可选<br><code>&quot;python&quot;.center(20,&quot;=&quot;)</code>结果为 <code>&quot;=======python=======&quot;</code></td>
</tr>
<tr>
<td align="center">str.strip(chars)</td>
<td>从<code>str</code>中去掉在其左侧和右侧<code>chars</code>中列出的字符<br><code>&quot;= python= &quot;.strip(&quot; =np&quot;)</code>结果为<code>&quot;ytho&quot;</code></td>
</tr>
<tr>
<td align="center">str.join(iter)</td>
<td>在<code>iter</code>变量除最后元素外每个元素后增加一个<code>str</code><br><code>&quot;,&quot;.join(&quot;12345&quot;)</code>结果为<code>&quot;1,2,3,4,5&quot;</code>主要用于字符串分隔等</td>
</tr>
</tbody></table>
<h3 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="- 字符串的格式化"></a>- 字符串的格式化</h3><blockquote>
<p>.format()方法 </p>
</blockquote>
<p><img src="https://wx3.sinaimg.cn/large/d20fc924ly1fzbwdgwg0mj21a50gctlm.jpg" alt="image"></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
